# -*- coding: utf-8 -*-
"""lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B1JPwA2CDxBF6d-ZFXoiWh5Qxlbbk3pU
"""

#Data cleaning
import pandas as p
df = p.read_csv('employee_data.csv')
print("Initial Data: \n", df.head())

df['Age'].fillna(df['Age'].mean(), inplace=True)
df['Salary'].fillna(df['Salary'].mean(), inplace=True)

df['Department'] = df['Department'].replace({
'Human Resources': 'HR',
'H.R.': 'HR',
'hr': 'HR'
})

df.drop_duplicates(subset='ID', keep='first', inplace=True)
print("\nCleaned Data:\n", df.head())

#Normalization
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
d = pd.read_csv('student_scores.csv')

print('Initial students score: \n', d.head())

scaler = MinMaxScaler()
d[['Math', 'Science', 'English']] = scaler.fit_transform(d[['Math', 'Science', 'English']])
print("\nNormalized Scores:\n", d.head())

print(d.columns)

#Data binning
import pandas as p
ca = p.read_csv('customers_age.csv')
print("Initial Data: \n", ca.head())

bins = [18, 30, 50, 80]
labels = ['Youth', 'Middle-aged', 'Senior']

ca['AgeGroup'] = p.cut(ca['Age'], bins=bins, labels=labels, right=False)

print(ca)

print("\nData after Binning:\n", ca.head())
age_group_distribution = ca['AgeGroup'].value_counts()
print("\nAge Group Distribution:\n", age_group_distribution)

#Discritization
import pandas as p
sd = p.read_csv('sales_data.csv')
print("Initial Data: \n", sd.head())

bins = [0, 5000, 20000, float('inf')]
labels = ['Low', 'Medium', 'High']
sd['SalesCategory'] = p.cut(sd['Sales'], bins=bins, labels=labels)
print("\nData after Discretization:\n", sd.head())

sales_category_distribution = sd['SalesCategory'].value_counts()
print("\nSales Category Distribution:\n", sales_category_distribution)

#Features selection
import pandas as pd
from sklearn.feature_selection import SelectKBest, chi2
md = pd.read_csv('medical_data.csv')
print("Initial Data: \n", md.head())

X = md.drop(columns=['Disease'])
y = md['Disease']

selector = SelectKBest(score_func=chi2, k=3)
selector.fit(X, y)

top_features = X.columns[selector.get_support()]
print("\nTop 3 Features for Predicting Disease:\n", top_features)